!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!C++	name	/aliased names/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!C++	c,class	/classes/
!_TAG_KIND_DESCRIPTION!C++	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C++	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C++	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C++	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C++	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C++	m,member	/class, struct, and union members/
!_TAG_KIND_DESCRIPTION!C++	n,namespace	/namespaces/
!_TAG_KIND_DESCRIPTION!C++	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C++	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C++	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C++	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!Lua	f,function	/functions/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!C++	0.0	/current.age/
!_TAG_PARSER_VERSION!Lua	0.0	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/wilson/code/cpp/koios/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.0.0	/p6.0.20221218.0/
!_TAG_ROLE_DESCRIPTION!C++!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C++!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C++!macro	undef	/undefined/
KOIOS_MACROS_H	include/koios/macros.h	/^#define KOIOS_MACROS_H$/;"	d
KOIOS_NAMESAPCE_BEG	include/koios/macros.h	/^#define KOIOS_NAMESAPCE_BEG /;"	d
KOIOS_NAMESAPCE_END	include/koios/macros.h	/^#define KOIOS_NAMESAPCE_END /;"	d
KOIOS_PROMISE_WRAPPER_H	include/koios/promise_wrapper.h	/^#define KOIOS_PROMISE_WRAPPER_H$/;"	d
KOIOS_TASK_CONCEPTS_H	include/koios/task_concepts.h	/^#define KOIOS_TASK_CONCEPTS_H$/;"	d
KOIOS_TASK_H	include/koios/task.h	/^#define KOIOS_TASK_H$/;"	d
KOIOS_TASK_SCHEDULER_CONCEPT_H	include/koios/task_scheduler_concept.h	/^#define KOIOS_TASK_SCHEDULER_CONCEPT_H$/;"	d
KOIOS_TASK_SCHEDULER_H	include/koios/global_task_scheduler.h	/^#define KOIOS_TASK_SCHEDULER_H$/;"	d
KOIOS_TASK_SCHEDULER_H	include/koios/task_scheduler.h	/^#define KOIOS_TASK_SCHEDULER_H$/;"	d
KOIOS_THREAD_POOL_H	include/koios/thread_pool.h	/^#define KOIOS_THREAD_POOL_H$/;"	d
TASK_PROMISE_BASE_H	include/koios/promise_base.h	/^#define TASK_PROMISE_BASE_H$/;"	d
__anon1aeaed010102	include/koios/promise_wrapper.h	/^          m_set_caller_impl{ [](void* p, ::std::coroutine_handle<> h) { static_cast<P*>(m_promis/;"	f	class:promise_wrapper	file:
_task	include/koios/task.h	/^struct _task$/;"	s
_type	include/koios/task.h	/^    _type(promise_type p)$/;"	f	class:_task::_type
_type	include/koios/task.h	/^class _task::_type : public get_result_aw<T, common_promise<T>>$/;"	c	class:_task
await_ready	include/koios/task.h	/^    constexpr bool await_ready() const noexcept { return false; }$/;"	f	class:get_result_aw	typeref:typename:bool
await_ready	include/koios/task.h	/^    constexpr bool await_ready() const { return false; }$/;"	f	class:get_result_aw	typeref:typename:bool
await_resume	include/koios/task.h	/^    auto await_resume() noexcept { return m_future.get(); }$/;"	f	class:get_result_aw	typeref:typename:auto
await_resume	include/koios/task.h	/^    constexpr void await_resume() const noexcept {}$/;"	f	class:get_result_aw	typeref:typename:void
await_suspend	include/koios/task.h	/^    void await_suspend(::std::coroutine_handle<> h)$/;"	f	class:get_result_aw	typeref:typename:void
enqueue	include/koios/task_scheduler.h	/^    void enqueue(::std::coroutine_handle<> h)$/;"	f	class:task_scheduler	typeref:typename:void
enqueue	include/koios/task_scheduler.h	/^    void enqueue(task_concept auto t)$/;"	f	class:task_scheduler	typeref:typename:void
final_suspend	include/koios/promise_base.h	/^    constexpr ::std::suspend_never final_suspend() const noexcept$/;"	f	class:promise_base	typeref:typename:::std::suspend_never
g_ts	src/global_task_scheduler.h	/^task_scheduler g_ts{ 10 };$/;"	v	typeref:typename:task_scheduler
get_future	include/koios/task.h	/^        auto get_future() { return m_promise.get_future(); }$/;"	f	class:_task::_type::promise_type	typeref:typename:auto
get_result_aw	include/koios/task.h	/^    get_result_aw(promise_wrapper promise)$/;"	f	class:get_result_aw
get_result_aw	include/koios/task.h	/^class get_result_aw$/;"	c
get_result_aw	include/koios/task.h	/^class get_result_aw<void>$/;"	c
get_return_object	include/koios/task.h	/^        _task<T>::_type get_return_object() noexcept$/;"	f	class:_task::_type::promise_type	typeref:typename:_task<T>::_type
get_task_scheduler	include/koios/global_task_scheduler.h	/^inline auto get_task_scheduler()$/;"	f	typeref:typename:auto
initial_suspend	include/koios/promise_base.h	/^    constexpr ::std::suspend_always initial_suspend() const noexcept$/;"	f	class:promise_base	typeref:typename:::std::suspend_always
m_numthr	include/koios/thread_pool.h	/^    size_t m_numthr;$/;"	m	class:thread_pool	typeref:typename:size_t
m_promise	include/koios/promise_wrapper.h	/^    void* const m_promise;$/;"	m	class:promise_wrapper	typeref:typename:void * const
m_promise	include/koios/task.h	/^    promise_wrapper m_promise;$/;"	m	class:get_result_aw	typeref:typename:promise_wrapper
m_set_caller_impl	include/koios/promise_wrapper.h	/^    void (*m_set_caller_impl)(void*, ::std::coroutine_handle<>);$/;"	m	class:promise_wrapper	typeref:typename:void (*)(void *,::std::coroutine_handle<>)
main	example/main.cc	/^int main()$/;"	f	typeref:typename:int
main	src/main.cc	/^int main(int argc, char** argv)$/;"	f	typeref:typename:int
main	test/main.cc	/^int main(int argc, char** argv)$/;"	f	typeref:typename:int
move_out_coro_handle	include/koios/task.h	/^    auto move_out_coro_handle() noexcept$/;"	f	class:_task::_type	typeref:typename:auto
promise_base	include/koios/promise_base.h	/^class promise_base$/;"	c
promise_type	include/koios/task.h	/^    class promise_type : public promise_base$/;"	c	class:_task::_type
promise_wrapper	include/koios/promise_wrapper.h	/^    promise_wrapper(P& p) noexcept$/;"	f	class:promise_wrapper
promise_wrapper	include/koios/promise_wrapper.h	/^class promise_wrapper$/;"	c
result	include/koios/task.h	/^    auto result()$/;"	f	class:_task::_type	typeref:typename:auto
return_value	include/koios/task.h	/^        void return_value(TT&& val)$/;"	f	class:_task::_type::promise_type	typeref:typename:void
set_caller	include/koios/promise_wrapper.h	/^    void set_caller(::std::coroutine_handle<> h) const$/;"	f	class:promise_wrapper	typeref:typename:void
size	include/koios/thread_pool.h	/^    auto size() const noexcept { return m_numthr; }$/;"	f	class:thread_pool	typeref:typename:auto
task_scheduler	include/koios/task_scheduler.h	/^    explicit task_scheduler(size_t thr_cnt)$/;"	f	class:task_scheduler
task_scheduler	include/koios/task_scheduler.h	/^class task_scheduler : public thread_pool$/;"	c
thread_pool	include/koios/thread_pool.h	/^class thread_pool$/;"	c
unhandled_exception	include/koios/task.h	/^        void unhandled_exception() const { throw; }$/;"	f	class:_task::_type::promise_type	typeref:typename:void
value_type	include/koios/task.h	/^    using value_type = T;$/;"	t	class:_task::_type	typeref:typename:T
value_type	include/koios/task.h	/^    using value_type = T;$/;"	t	class:get_result_aw	typeref:typename:T
~_type	include/koios/task.h	/^    ~_type() noexcept$/;"	f	class:_task::_type
