#ifndef KOIOS_UNIQUE_LOCK_H
#define KOIOS_UNIQUE_LOCK_H

#include <utility>
#include "koios/task.h"
#include "koios/lock_base.h"

namespace koios
{

/*! \brief  The RAII object which holds the ownership of corresponding mutex. 
 *
 *  This type of object should be generated by a `koios::mutex` object.
 */
template<typename Mutex>
class unique_lock : public lock_base<Mutex>
{
public:
    using lock_base<Mutex>::lock_base;

    /*! \brief Regain the ownership of the corresponding mutex (asynchronous) */
    task<> 
    lock()
    {
        if (!this->m_mutex) [[unlikely]]
            throw koios::exception{ "there's no corresponding mutex instance!" };

        auto lk = co_await this->m_mutex->acquire();

        assert(!this->is_hold());
        this->m_hold = ::std::exchange(lk.m_hold, false);
        assert(this->is_hold());

        co_return;
    }
};

} // namespace koios

#endif
